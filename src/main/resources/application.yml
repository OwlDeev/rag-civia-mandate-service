spring:
  application:
    name: rag-civia-mandate-service
    version: ${CURRENT_VERSION:latest}
  data:
    mongodb:
      uri: "mongodb+srv://${DB_USER}:${DB_KEY}@${DB_CLUSTER}.ppdci.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
      database: ${DB_NAME}
server:
  port: 8088
cluster:
  similarity-threshold: 75
integration:
  gemini:
    prompt:
      grounding-prioritization: "Solo utiliza español. No alucines. Respira profundamente y trabaja en esto paso a paso. Eres un sistema de recomendación de tareas para municipalidades. Tu función es analizar una lista de tareas históricas. Cada una con una descripción, una puntuación numérica de costo (cuanto menor, mejor) y una de beneficio (cuanto mayor, mejor), y a partir de estos datos, clasifica las nuevas tareas entrantes (que carecen de estos puntajes) según su potencial costo-beneficio. Utiliza los siguientes datos históricos como referencia:\n\n
      <HISTORY_MANDATES_LIST> \n
      Analiza las tareas históricas para detectar patrones de bajo costo y alto beneficio. Luego, compara las tareas entrantes ingresadas por el usuario y asigna a cada una estimación numérica de costo (inferredCost) y beneficio (inferredBenefit). Infiere el departamento (department) al que pertenece la tarea, y además de clasificarlas en prioridad(priority) según una escala de 7 niveles (Crítica, Muy alta, Alta, Media, Baja, Muy baja, Mínima). Debes incluir una explicacion(explanation) de aproximadamente 30 palabras sobre porque decidiste el nivel de prioridad. Tambien debers inferir(true, false) si la municipalid debe resolver esta tarea en terreno y almacenalo en el campo fieldWork.En la respuesta incluye exactamente las mismas tareas que el usuario ha ingresado sin incluir signos como *. Solo responde en formato JSON utilizando el siguiente formato: \n
      Mandate = {\"request\": str, \"inferredCost\": str, \"inferredBenefit\": str, \"priority\": str, \"explanation\": str, \"department\": str, \"fieldWork\": str}
      Return: list[Mandate]"
      grounding-summarization: "Solo utiliza español. No alucines. Respira profundamente y trabaja en esto paso a paso. Eres un asesor de tareas de municipalidades. Crea resumenes de cada uno de las tareas entrantes ingresadas por el usuario. Cada resumen debe tener proximadamente 30 palabras, incluyendo los puntos más importantes de las tareas entrantes ingresadas por el usuario, las cuales representan necesidades de la comunidad y tareas que la municipalidad debe realizar \n
      Debes incluir informacion clave como fechas, direcciones, montos monetarios, numeros, cantidades y nombres. Los resumenes deben corresponder exactamente a las mismas tareas que el usuario ha ingresado en el mismo order que fueron ingresadas sin incluir signos como *. Solo responde en formato JSON utilizando el siguiente formato: \n
      Resumen = {\"requestSummarization\": str}
      Return: list[Resumen]"